version: "3.8"

networks:
  frontend:
    driver: overlay
    driver_opts:
      encrypted: ""
    external: true
    attachable: true
    name: frontend
  backend:
    driver: overlay
    driver_opts:
      encrypted: ""
    external: true
    attachable: true
    name: backend

configs:
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml

services:
  prometheus:
    image: fernandotag/metrics-prometheus:v2.18.1
    networks:
      - frontend
      - backend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}'
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
    deploy:
      labels:
        - "traefik.docker.lbswarm=true"
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAINNAME}`)"
        - "traefik.http.routers.prometheus.service=prometheus"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.http.routers.prometheus.middlewares=chain-basic-auth@file" 
      placement:
        constraints:
        - node.role==manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  cadvisor:
    image: google/cadvisor
    networks:
      - backend
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
          
  node-exporter:
    image: fernandotag/node-export:latest
    networks:
      - backend
    volumes:
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /etc/hostname:/etc/nodename
    environment:
      - NODE_ID={{.Node.ID}}
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

  grafana:
    image: fernandotag/metrics-grafana:7.0.0
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - frontend
      - backend
    user: "104"
    secrets:
      - gf_smtp_host
      - gf_smtp_user
      - gf_smtp_password
      - gf_smtp_from_address
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning/
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: /run/secrets/gf_smtp_host
      GF_SMTP_USER: /run/secrets/gf_smtp_user
      GF_SMTP_PASSWORD: /run/secrets/gf_smtp_password
    deploy:
      labels:
        - "traefik.docker.lbswarm=true"
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAINNAME}`)"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        reservations:
          memory: 64M 
        limits:
          memory: 128M

  alertmanager:
    depends_on:
      - prometheus
    image: prom/alertmanager:v0.15.3
    networks:
      - backend
    secrets:
      - alertmanager_config
    command:
      - '--config.file=/run/secrets/alertmanager_config'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 16M 

  unsee:
    image: cloudflare/unsee:v0.9.2
    depends_on:
      - alertmanager
    networks:
      - frontend
      - backend
    environment:
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.docker.lbswarm=true"
        - "traefik.enable=true"
        - "traefik.http.routers.unsee.entrypoints=websecure"
        - "traefik.http.routers.unsee.rule=Host(`unsee.${DOMAINNAME}`)"
        - "traefik.http.routers.unsee.service=unsee"
        - "traefik.http.routers.unsee.tls=true"
        - "traefik.http.routers.unsee.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
        - "traefik.http.services.unsee.loadbalancer.server.port=8080"
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 32M

secrets:
  gf_smtp_host:
    file: ./grafana/secrets/gf_smtp_host.txt
  gf_smtp_user:
    file: ./grafana/secrets/gf_smtp_user.txt
  gf_smtp_password:
    file: ./grafana/secrets/gf_smtp_password.txt
  gf_smtp_from_address:
    file: ./grafana/secrets/gf_smtp_from_address.txt
  alertmanager_config:
    file: ./alertmanager/secrets/alertmanager_config.yml

volumes:
    prometheus_data: {}
    grafana_data: {}
    alertmanager: {}
  
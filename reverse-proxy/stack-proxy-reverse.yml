version: "3.8"

networks:
  frontend:
    driver: overlay
    driver_opts:
      encrypted: ""
    external: true
    name: frontend
  backend:
    driver: overlay
    driver_opts:
      encrypted: ""
    external: true
    attachable: true
    name: backend
    
services:

  traefik:
    image: fernandotag/proxy-reverso-traefik:v2.2
    command: # CLI arguments
      - --global.checkNewVersion=true
        #      - --global.sendAnonymousUsage=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
#      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.manualrouting=true
      - --entryPoints.metrics.address=:8082
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik/data/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=frontend
      - --providers.docker.swarmMode=true
      - --providers.docker.swarmModeRefreshSeconds=15s
      - --providers.docker.watch
      - --providers.file.directory=/traefik/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
#      - "--metrics.prometheus=true"
#      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - --certificatesResolvers.dns-cloudflare.acme.email=/run/secrets/cf_api_email
      - --certificatesResolvers.dns-cloudflare.acme.storage=/traefik/data/acme/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
      - frontend
      - backend
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
#     - target: 8080
#        published: 8080
#        protocol: tcp
#        mode: ingress
    volumes:
      - traefik_data:/traefik/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    secrets:
      - htpasswd
      - cf_api_email
      - cf_api_key
    environment:
      - CF_API_EMAIL=/run/secrets/cf_api_email
      - CF_API_KEY=/run/secrets/cf_api_key
    deploy:
      placement:
        constraints:
          - node.role == manager
      update_config:
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      mode: replicated
      replicas: 1
      labels:
        - "traefik.docker.lbswarm=true"
        # API
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik.rule=Host(`traefik.$DOMAINNAME`)"
        - "traefik.http.routers.traefik.service=api@internal"
        # HTTP-to-HTTPS Redirect
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:[a-z-.]+}`)"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

        # Wildcard cert
        - "traefik.http.routers.traefik.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
        - "traefik.http.routers.traefik.tls.domains[0].main=${DOMAINNAME}"
        - "traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAINNAME}"
#       - "traefik.http.routers.traefik-rtr.tls.domains[1].main=${SECONDDOMAINNAME}" # Pulls main cert for second domain
#       - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.${SECONDDOMAINNAME}" # Pulls wildcard cert for second domain

        ## Middlewares
#       - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # No Authentication
        - "traefik.http.routers.traefik.middlewares=chain-basic-auth@file" # Basic Authentication
#       - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0 
secrets:
  htpasswd:
    file: ./secrets/.htpasswd
  cf_api_email:
    file: ./secrets/cf_api_email.txt
  cf_api_key:
    file: ./secrets/cf_api_key.txt

volumes:
    traefik_data: {}
  

  